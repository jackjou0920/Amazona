{"ast":null,"code":"import Axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_LOGOUT } from '../constants/userConstants';\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, update, logout };","map":{"version":3,"sources":["/Users/jackjou/Desktop/self-practice/Amazona/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_LOGOUT","signin","email","password","dispatch","type","payload","data","post","set","JSON","stringify","error","message","register","name","update","userId","getState","userSignin","userInfo","put","headers","Authorization","token","logout","remove"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { \n  USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, \n  USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, \n  USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_LOGOUT\n} from '../constants/userConstants';\n\nconst signin = (email, password) => async (dispatch) => {\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\n  try {\n    const { data } = await Axios.post(\"/api/users/signin\", { email, password });\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\n  }\n}\n\nconst register = (name, email, password) => async (dispatch) => {\n  dispatch({ type: USER_REGISTER_REQUEST, payload: { name, email, password } });\n  try {\n    const { data } = await Axios.post(\"/api/users/register\", { name, email, password });\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\n  }\n}\n\nconst update = ({ userId, name, email, password }) => async (dispatch, getState) => {\n  const { userSignin: { userInfo } } = getState();\n  dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password } });\n  try {\n    const { data } = await Axios.put(\"/api/users/\" + userId,\n      { name, email, password }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\n  }\n}\n\n\nconst logout = () => (dispatch) => {\n  Cookie.remove(\"userInfo\");\n  dispatch({ type: USER_LOGOUT });\n}\n\nexport { signin, register, update, logout };"]},"metadata":{},"sourceType":"module"}